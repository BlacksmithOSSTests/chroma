name: Chroma Python Base Tests

on:
  workflow_call:
    inputs:
      python_versions:
        description: 'Python versions to test (as json array)'
        required: false
        default: '["3.9"]'
        type: string
      property_testing_preset:
        description: 'Property testing preset'
        required: true
        type: string

jobs:
  test-rust-bindings:
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        python: ${{fromJson(inputs.python_versions)}}
        platform: [depot-ubuntu-24.04-4, depot-windows-2022-4]
        test-globs: ["--ignore-glob 'chromadb/test/property/*' --ignore-glob 'chromadb/test/stress/*' --ignore-glob 'chromadb/test/distributed/*'",
                  "chromadb/test/property/test_add.py",
                  "chromadb/test/property/test_collections.py",
                  "chromadb/test/property/test_collections_with_database_tenant.py",
                  "chromadb/test/property/test_collections_with_database_tenant_overwrite.py",
                  "chromadb/test/property/test_cross_version_persist.py",
                  "chromadb/test/property/test_embeddings.py",
                  "chromadb/test/property/test_filtering.py",
                  "chromadb/test/property/test_persist.py",
                  "chromadb/test/property/test_restart_persist.py",
                  ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: ./.github/actions/python
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          github-token: ${{ github.token }}
      - name: Build Rust bindings
        uses: PyO3/maturin-action@v1
        with:
          command: build
          sccache: true
      - name: Install built wheel
        shell: bash
        run: pip install --no-index --find-links target/wheels/ chromadb
      - name: Configure pytest to upload results to Datadog
        uses: datadog/test-visibility-github-action@v2
        # This action currently fails on Windows (https://github.com/DataDog/test-visibility-github-action/issues/36)
        if: ${{ !contains(matrix.platform, 'windows') }}
        with:
          languages: python
          api_key: ${{ secrets.DD_API_KEY }}
          site: ${{ vars.DD_SITE }}
      - name: Test
        run: python -m pytest ${{ matrix.test-globs }}
        shell: bash
        env:
          PROPERTY_TESTING_PRESET: ${{ inputs.property_testing_preset }}
          CHROMA_RUST_BINDINGS_TEST_ONLY: "1"

  test-rust-single-node-integration:
    strategy:
      fail-fast: false
      matrix:
        python: ${{fromJson(inputs.python_versions)}}
        # NOTE(hammadb): For some reason depot-windows fails so leaving default windows-latest
        # on chromadb/test/client/test_multiple_clients_concurrency.py::test_multiple_clients_concurrently
        platform: [depot-ubuntu-24.04, windows-latest]
        test-globs: ["--ignore-glob 'chromadb/test/property/*' --ignore-glob 'chromadb/test/stress/*' --ignore='chromadb/test/test_cli.py' --ignore-glob 'chromadb/test/distributed/*'",
                    "chromadb/test/property/test_add.py",
                    "chromadb/test/property/test_collections.py",
                    "chromadb/test/property/test_collections_with_database_tenant.py",
                    "chromadb/test/property/test_cross_version_persist.py",
                    "chromadb/test/property/test_embeddings.py",
                    "chromadb/test/property/test_filtering.py",
                    "chromadb/test/property/test_persist.py",
                    "chromadb/test/stress"]
        include:
          - platform: depot-ubuntu-24.04
            env-file: compose-env.linux
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Python (${{ matrix.python }})
      uses: ./.github/actions/python
    - name: Setup Rust
      uses: ./.github/actions/rust
      with:
          github-token: ${{ github.token }}
    - name: Configure pytest to upload results to Datadog
      uses: datadog/test-visibility-github-action@v2
      # This action currently fails on Windows (https://github.com/DataDog/test-visibility-github-action/issues/36)
      if: ${{ !contains(matrix.platform, 'windows') }}
      with:
        languages: python
        api_key: ${{ secrets.DD_API_KEY }}
        site: ${{ vars.DD_SITE }}
    - name: Rust Integration Test
      run: bin/rust-integration-test.sh ${{ matrix.test-globs }}
      shell: bash
      env:
        ENV_FILE: ${{ matrix.env-file }}
        PROPERTY_TESTING_PRESET: ${{ inputs.property_testing_preset }}

  test-rust-thin-client:
    strategy:
      matrix:
        python: ${{fromJson(inputs.python_versions)}}
        platform: [depot-ubuntu-24.04, depot-windows-2022]
        test-globs: ["chromadb/test/property/test_add.py",
                    "chromadb/test/property/test_collections.py",
                    "chromadb/test/property/test_collections_with_database_tenant.py",
                    "chromadb/test/property/test_embeddings.py",
                    "chromadb/test/property/test_filtering.py"]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python (${{ matrix.python }})
        uses: ./.github/actions/python
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          github-token: ${{ github.token }}
      - name: Configure pytest to upload results to Datadog
        uses: datadog/test-visibility-github-action@v2
        # This action currently fails on Windows (https://github.com/DataDog/test-visibility-github-action/issues/36)
        if: ${{ !contains(matrix.platform, 'windows') }}
        with:
          languages: python
          api_key: ${{ secrets.DD_API_KEY }}
          site: ${{ vars.DD_SITE }}
      - name: Test
        run: bin/rust-integration-test.sh ${{ matrix.test-globs }}
        shell: bash
        env:
          CHROMA_THIN_CLIENT: "1"
          ENV_FILE: ${{ matrix.env-file }}
          PROPERTY_TESTING_PRESET: ${{ inputs.property_testing_preset }}

  build-cluster-images:
    runs-on: blacksmith-4vcpu-ubuntu-2204
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Blacksmith builder
        uses: useblacksmith/build-push-action@setup-only
        with:
          setup-only: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: blacksmithcihello
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Build and push all images using docker/bake-action
      - name: Build and push Docker images
        uses: docker/bake-action@v5
        with:
          files: docker-bake.hcl
          push: true

      # Extract and export image tags
      - name: Export image tags
        run: |
          docker buildx bake --file docker-bake.hcl --print | \
            jq -r '.target | to_entries[] | .value.tags[]' | \
            grep "blacksmithcihello" > image-tags.txt
          
          echo "Images built and pushed:"
          cat image-tags.txt

      # Export the image repository:tag for later use
      - name: Upload image tags file
        uses: useblacksmith/cache/save@v5
        with:
          key: image-tags-${{ github.sha }}
          path: image-tags.txt

  test-cluster-rust-frontend:
    needs: build-cluster-images
    strategy:
      fail-fast: false
      matrix:
        python: ${{fromJson(inputs.python_versions)}}
        platform: ["blacksmith-4vcpu-ubuntu-2204"]
        test-globs: ["chromadb/test/api",
                    "chromadb/test/api/test_collection.py",
                    "chromadb/test/api/test_limit_offset.py",
                    "chromadb/test/property/test_collections.py",
                    "chromadb/test/property/test_add.py",
                    "chromadb/test/property/test_filtering.py",
                    "chromadb/test/property/test_embeddings.py",
                    "chromadb/test/property/test_collections_with_database_tenant.py",
                    "chromadb/test/property/test_collections_with_database_tenant_overwrite.py",
                    "chromadb/test/distributed/test_sanity.py"]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/python
        with:
          python-version: ${{ matrix.python }}
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: blacksmithcihello
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      # Download the image repository:tag from the build job
      - name: Download image tags file
        uses: useblacksmith/cache/restore@v5
        with:
          key: image-tags-${{ github.sha }}
          path: image-tags.txt
      - name: Print image tags
        run: cat image-tags.txt
      
      # Pull the pre-built images
      - name: Pull pre-built images
        run: |
          # Pull each image from the registry
          while read -r image; do
            if [[ -n "$image" ]]; then  # Skip empty lines
              echo "Pulling image: $image"
              docker pull "$image" || {
                echo "Warning: Failed to pull $image, will retry once..."
                sleep 5
                docker pull "$image" || echo "Error: Failed to pull $image after retry"
              }
              
              # Tag with local name (without registry prefix)
              local_tag=$(echo "$image" | sed "s|blacksmithcihello\/||")
              if [[ "$image" != "$local_tag" ]]; then
                docker tag "$image" "$local_tag"
                echo "Tagged $image as $local_tag"
              fi
            fi
          done < image-tags.txt
          
          # List all available images
          echo "Available Docker images:"
          docker images | grep -E '(chroma|sysdb|service)'
      
      # Deploy with Tilt in deploy-only mode, skipping Docker builds
      - name: Deploy with Tilt
        uses: ./.github/actions/tilt
        with:
          only_deploy: true
      
      # Run tests
      - name: Test
        run: bin/cluster-test.sh bash -c 'python -m pytest "${{ matrix.test-globs }}"'
        shell: bash
        env:
          PROPERTY_TESTING_PRESET: ${{ inputs.property_testing_preset }}
          CHROMA_RUST_FRONTEND_TEST_ONLY: "1"
          CHROMA_SERVER_HOST: "localhost:3000"
      - name: Compute artifact name
        if: always()
        id: compute-artifact-name
        run: echo "artifact_name=cluster_logs_rust_frontend_$(basename "${{ matrix.test-globs }}" .py)_${{ matrix.python }}" >> $GITHUB_OUTPUT
      - name: Save service logs to artifact
        if: always()
        uses: ./.github/actions/export-tilt-logs
        with:
          artifact-name: ${{ steps.compute-artifact-name.outputs.artifact_name }}

  merge-cluster-logs:
    runs-on: ubuntu-latest
    needs: test-cluster-rust-frontend
    steps:
      - name: Merge
        uses: actions/upload-artifact/merge@v4
        with:
          name: cluster_test_logs
          pattern: cluster_logs_*

  test-rust-bindings-stress:
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        python: ${{fromJson(inputs.python_versions)}}
        platform: [depot-ubuntu-24.04-16, depot-windows-2022-16]
        test-globs: ["chromadb/test/stress"]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: ./.github/actions/python
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Rust
        uses: ./.github/actions/rust
        with:
          github-token: ${{ github.token }}
      - name: Build Rust bindings
        uses: PyO3/maturin-action@v1
        with:
          command: build
          sccache: true
      - name: Install built wheel
        shell: bash
        run: pip install --no-index --find-links target/wheels/ chromadb
      - name: Configure pytest to upload results to Datadog
        uses: datadog/test-visibility-github-action@v2
        # This action currently fails on Windows (https://github.com/DataDog/test-visibility-github-action/issues/36)
        if: ${{ !contains(matrix.platform, 'windows') }}
        with:
          languages: python
          api_key: ${{ secrets.DD_API_KEY }}
          site: ${{ vars.DD_SITE }}
      - name: Test
        run: python -m pytest ${{ matrix.test-globs }}
        shell: bash
        env:
          PROPERTY_TESTING_PRESET: ${{ inputs.property_testing_preset }}
          CHROMA_RUST_BINDINGS_TEST_ONLY: "1"

  test-python-cli:
    strategy:
      fail-fast: false
      matrix:
        python: ${{fromJson(inputs.python_versions)}}
        platform: [depot-ubuntu-24.04, windows-latest]
        test-globs: ["chromadb/test/test_cli.py"]
        include:
          - platform: depot-ubuntu-24.04
            env-file: compose-env.linux
          - platform: windows-latest
            env-file: compose-env.windows
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Python (${{ matrix.python }})
      uses: ./.github/actions/python
    - name: Setup Rust
      uses: ./.github/actions/rust
      with:
        github-token: ${{ github.token }}
    - name: Build Rust bindings
      uses: PyO3/maturin-action@v1
      with:
        command: build
        sccache: true
    - name: Install built wheel
      shell: bash
      run: pip install --no-index --find-links target/wheels/ chromadb
    - name: Configure pytest to upload results to Datadog
      uses: datadog/test-visibility-github-action@v2
      # This action currently fails on Windows (https://github.com/DataDog/test-visibility-github-action/issues/36)
      if: ${{ !contains(matrix.platform, 'windows') }}
      with:
        languages: python
        api_key: ${{ secrets.DD_API_KEY }}
        site: ${{ vars.DD_SITE }}
    - name: Integration Test
      run: bin/python-integration-test ${{ matrix.test-globs }}
      shell: bash
      env:
        ENV_FILE: ${{ matrix.env-file }}
        PROPERTY_TESTING_PRESET: ${{ inputs.property_testing_preset }}
